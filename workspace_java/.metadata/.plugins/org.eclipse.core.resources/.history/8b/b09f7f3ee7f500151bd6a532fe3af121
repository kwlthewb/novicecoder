
public class BigONotation {
	private int[] theArray;
	private int arraySize;
	private int itemsInArray = 0;
	static long startTime;
	static long endTime;
	
	BigONotation(int s) {
		arraySize = s;
		theArray = new int[s];
	}
	
	public static void main(String[] args) {
		BigONotation testAlgo1 = new BigONotation(100000);
		testAlgo1.generateRandomArray();
		BigONotation testAlgo2 = new BigONotation(400000);
		testAlgo2.generateRandomArray();
		BigONotation testAlgo3 = new BigONotation(900000);
		testAlgo3.generateRandomArray();
		
		testAlgo1.linearSearchForValue(10);
		testAlgo2.linearSearchForValue(10);
		testAlgo3.linearSearchForValue(10);
		
		BigONotation testAlgo4 = new BigONotation(50);
		testAlgo4.generateRandomArray();
		testAlgo4.bubbleSort();
		testAlgo4.printArray();
		
	}
	
	// O(1) - code executes in same amount of time regardless of amount of data
	public void addItemToArray(int newItem) {
		theArray[itemsInArray++] = newItem; // performs the same no matter size of array
	}
	// O(N) - example is linear search, describes as worst case where the entire array is searched
	public void linearSearchForValue(int value) {
		boolean valueInArray = false;
		String indexsWithValue = "";
		startTime = System.currentTimeMillis();
		for(int i = 0; i < arraySize; i++) {
			if(theArray[i] == value) {
				valueInArray = true;
				indexsWithValue += i + ",";
			}
		}
		endTime = System.currentTimeMillis();
		System.out.println("Linear search time: " + (endTime - startTime));
	}
	
	// O(N^2) - loop through array twice for example
	public void bubbleSort() {
		int temp = 0;
		startTime = System.currentTimeMillis();
		for(int i = arraySize - 1; i > 1; i--) {
			for(int j = 0; j < i; j++) {
				if(theArray[j] > theArray[j+1]) {
					temp = theArray[j];
					theArray[j] = theArray[j+1];
					theArray[j+1] = temp;
				}
			}
		}
		
		endTime = System.currentTimeMillis();
		System.out.println("Bubble sort time: " + (endTime - startTime));
	}
	
	public void generateRandomArray() {
		for(int i = 0; i < arraySize; i++) {
			theArray[i] = (int)(Math.random() * 1000) + 10;
		}
		itemsInArray = arraySize - 1;
	}
	public void printArray() {
		for(int i = 0; i < arraySize; i++) {
			System.out.println(i + "," + theArray[i]);
		}
	}
}
