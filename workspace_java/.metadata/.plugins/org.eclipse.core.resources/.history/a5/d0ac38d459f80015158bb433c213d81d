package document;

import java.util.List;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

/** 
 * A naive implementation of the Document abstract class. 
 * @author UC San Diego Intermediate Programming MOOC team
 */
public class BasicDocument extends Document 
{
	/** Create a new BasicDocument object
	 * 
	 * @param text The full text of the Document.
	 */
	public BasicDocument(String text)
	{
		super(text);
	}
	
	
	/**
	 * Get the number of words in the document.
	 * "Words" are defined as contiguous strings of alphabetic characters
	 * i.e. any upper or lower case characters a-z or A-Z
	 * 
	 * @return The number of words in the document.
	 */
	@Override
	public int getNumWords()
	{
		//TODO: Implement this method.  See the Module 1 support videos 
	    // if you need help.
		List<String> words = getTokens("[a-zA-Z]+");
	    return words.size();
	}
	
	/**
	 * Get the number of sentences in the document.
	 * Sentences are defined as contiguous strings of characters ending in an 
	 * end of sentence punctuation (. ! or ?) or the last contiguous set of 
	 * characters in the document, even if they don't end with a punctuation mark.
	 * 
	 * @return The number of sentences in the document.
	 */
	@Override
	public int getNumSentences()
	{
	    //TODO: Implement this method.  See the Module 1 support videos 
        // if you need help.
		//List<String> sentences = getTokens("(\\.+ *)|(\\?+ *)|(\\!+ *)|\n|\r");
		List<String> sentences = getTokens("(\\.+ )|(\\?+ )|(\\!+ )|\n|\r|(: )|(\\.+[\n\r])|(\\?+[\n\r])|(\\!+[\n\r])|.$");
        return sentences.size();
	}
	
	/**
	 * Get the number of syllables in the document.
	 * Words are defined as above.  Syllables are defined as:
	 * a contiguous sequence of vowels, except for a lone "e" at the 
	 * end of a word if the word has another set of contiguous vowels, 
	 * makes up one syllable.   y is considered a vowel.
	 * @return The number of syllables in the document.
	 */
	@Override
	public int getNumSyllables()
	{
	    //TODO: Implement this method.  See the Module 1 support videos 
        // if you need help.
		int count = 0;
		List<String> words = getTokens("[a-zA-Z]+");
		for(String s: words) {
			s = s.toLowerCase();
			if (s.charAt(s.length()-1) == 'e') {
		        if (isSilent(s)){
		            String word = s.substring(0, s.length()-1);
		            count = count + countVowel(word);
		        } else {
		            count++;
		        }
		    } else {
		        count = count + countVowel(s);
		    }
		}
        return count;
	}
	
	private int countVowel(String word) {
	    int count = 0;
	    Pattern pat = Pattern.compile("[^aeiouy]*[aeiouy]+");
	    Matcher m = pat.matcher(word);

	    while (m.find()) {
	        count++;
	    }
	    return count;
	}

	private boolean isSilent(String word) {
	    word = word.substring(0, word.length()-1);
	    Pattern pat = Pattern.compile("[aeiouy]");
	    Matcher m = pat.matcher(word);

	    if (m.find()) {
	        return true;
	    } else
	        return false;
	}
	
	
	/* The main method for testing this class. 
	 * You are encouraged to add your own tests.  */
	public static void main(String[] args)
	{
		testCase(new BasicDocument("This is a test.  How many???  "
		        + "Senteeeeeeeeeences are here... there should be 5!  Right?"),
				16, 13, 5);
		testCase(new BasicDocument(""), 0, 0, 0);
		testCase(new BasicDocument("sentence, with, lots, of, commas.!  "
		        + "(And some poaren)).  The output is: 7.5."), 15, 11, 4);
		testCase(new BasicDocument("many???  Senteeeeeeeeeences are"), 6, 3, 2);
		testCase(new BasicDocument("Here is a series of test sentences. Your program should "
				+ "find 3 sentences, 33 words, and 49 syllables. Not every word will have "
				+ "the correct amount of syllables (example, for example), "
				+ "but most of them will."), 49, 33, 3);
		testCase(new BasicDocument("Segue"), 2, 1, 1);
		testCase(new BasicDocument("Sentence"), 2, 1, 1);
		testCase(new BasicDocument("Sentences?!"), 3, 1, 1);
		testCase(new BasicDocument("Lorem ipsum dolor sit amet, qui ex choro quodsi moderatius, nam dolores explicari forensibus ad."),
		         32, 15, 1);
		BasicDocument bd = new BasicDocument("A grade level (based on the USA education system) is equivalent to " 
				+ "the number of years of education a person has had. A score of around 10-12 is "
				+ "roughly the reading level on completion of high school. Text to be read by the "
				+ "general public should aim for a grade level of around 8.");
		System.out.println(bd.getNumSentences());
		System.out.println(bd.getNumSyllables());
		System.out.println(bd.getNumWords());
		System.out.println(bd.getFleschScore());
		
		double score = 206.835 - (1.015 * 4 ) - (84.6 * (double) 5 / (double) 4 );
		System.out.println(score);
		
	}
	
}
