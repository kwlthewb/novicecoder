/*
 * Inherited.cpp
 *
 *  Created on: Mar 8, 2016
 *      Author: bill
 */

#include "Inherited.h"

void printStr(char *src) {
	for(char* it = src; *it; ++it)
		std::cout << *it;
	std::cout << "|" << std::endl;
}

void reverseStr(char *src) {
	char temp, *end_ptr;
	if(src == NULL || !(*src))
		return;
	std::cout << strlen(src) << std::endl;
	end_ptr = src + strlen(src) - 1;
	std::cout << *src << "," << *end_ptr << std::endl;
	while(end_ptr > src) {
		temp = *src;
		*src = *end_ptr;
		*end_ptr = *temp;
		src++;
		end_ptr--;
	}
}

int main() {
	std::string str("asdj lajsdf aldsj");
	printStr(const_cast<char*>(str.c_str()));

	std::string str2("1234567890");
	std::cout << str2 << "|" << std::endl;
	reverseStr(const_cast<char*>(str2.c_str()));
	std::cout << str2 << "|" << std::endl;
	return 0;

	Inherited::D_pub d1;
	d1.f();
	d1.f_pub();
	Inherited::D_prot d2;
	d2.f_pub(); // error unless using B::f_pub is added to D_prot public space
	d2.f();
	Inherited::D_priv d3;
	d3.f();

	Inherited::B* pB = &d1;
	//pB = &d2;

	InheritedII::yellowdog *py = new InheritedII::yellowdog("Bob");
	py->bark();
	InheritedII::dog *pd = py;
	pd->bark();

	InheritedII::TreeNode *root = new InheritedII::TreeNode();
	root->right = 0;
	root->left = 0;
	InheritedII::EmployeeChart_Parser ep;
	ep.parse_preorder(root);

	double b1 = 4.0;
	double b2 = -5.0;
	if(Templates::aabs(b1) == Templates::aabs(b2))
		std::cout << b1 << " == " << b2 << std::endl;
	else
		std::cout << b1 << " != " << b2 << std::endl;

	Templates::adder<99> aa;
	Templates::Pow<9,2> aaa;
	std::cout << aa.doit(5) << std::endl;
	std::cout << aaa.value << std::endl;

	Templates::SimplePair<int, double> foo = Templates::SimplePair<int, double>{2, 4.56};
	Templates::SimplePair<InheritedII::dog, InheritedII::yellowdog> foo2
		= Templates::SimplePair<InheritedII::dog, InheritedII::yellowdog>{
		InheritedII::dog("Billy"), InheritedII::yellowdog("Bear")};

	std::cout << foo.first << "," << foo.second << std::endl;

	foo2.first.bark();
	foo2.second.bark();

	Templates::printSomthing<5>("something");

	InheritedII::IOFile f("some file");

	return 0;
}
