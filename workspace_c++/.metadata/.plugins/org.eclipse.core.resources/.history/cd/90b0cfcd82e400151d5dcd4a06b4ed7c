/*
 * DogFactory.cpp
 *
 *  Created on: Mar 6, 2016
 *      Author: bill
 */

#include "DogFactory.h"
#include "Incls.h"

const int count = 2;// 7680500

class Dog {
public:
	Dog() { std::cout << "Dog is born." << std::endl; }
	virtual ~Dog() { std::cout << "Dog destroyed." << std::endl; }
	void bark() { std::cout << "I am just a dog!" << std::endl; }
	void seeCat() { bark(); }
};

class YellowDog : public Dog {
	std::vector<std::string*> _strVect;
	std::string *ptr[count];
public:
	YellowDog() {
		std::cout << "YelloDog created..." << std::endl;
		for(int i = 0; i < count; i++) {
			//_strVect.push_back(new std::string("this is a llot of crap.....this is a llot of crap.....this is a llot of crap....."));
			ptr[i] = new std::string("this is a llot of crap.....this is a llot of crap.....this is a llot of crap.....");
		}
		std::cout << "YelloDog fed..." << std::endl;
	}
	~YellowDog() { for(int i = 0; i < count; i++) { delete ptr[i]; } delete [] ptr; std::cout << "YellowDog destroyed." << std::endl; }
	void bark() { std::cout << "I am a yellow dog!" << std::endl; }
};

class DogFactory {
public:
	//static Dog* createYellowDog() { return (new YellowDog()); }
	static std::shared_ptr<Dog> createYellowDog() {
		return std::shared_ptr<Dog>(new YellowDog());
	}
};

int main() {
//	int count = 500;
//	for(int i = 1; i <= 1; i++) {
//		//Dog* pd = DogFactory::createYellowDog();
//		// delete pd;
//		std::shared_ptr<Dog> pd = DogFactory::createYellowDog();
//		std::cout << i << " dog..." << (i * count) << std::endl;
//		sleepcp(1000);
//	}
	YellowDog d;
	d.seeCat();
	return 0;
}
