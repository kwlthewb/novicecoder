/*
 * Races.cpp
 *
 *  Created on: Mar 23, 2016
 *      Author: bill
 */

#include "Races.h"
#include "Lock.h"
#include "Incls.h"

class A {
public:
	A() { std::cout << "A is born...\n"; }
	void read() { std::cout << "Class A read...\n"; }
	void ASomething() { std::cout << "Class ASomething...\n"; }
};

class B {
public:
	B() { std::cout << "B is born...\n"; }
	void read() { std::cout << "Class B read...\n"; }
	void BSomething() { std::cout << "Class BSomething...\n"; }
};

class C : public A, public B {
public:
	C() { std::cout << "C is born...\n"; }
	using A::read;
	void CSomething() { std::cout << "Class CSomething...\n"; }
};

class File {
public:
	std::string m_name;
	std::string m_path;
	File() : m_name(""), m_path("") { std::cout << "Blank File is born..." << m_name << " path..." << m_path << std::endl; }
	File(const std::string& n, const std::string& p) : m_name(n), m_path(p) {
		std::cout << "File is born..." << m_name << " path..." << m_path << std::endl;
	}
	~File() { std::cout << "File is destroyed...\n"; }
	void open() { std::cout << "Open called...\n"; }
};

class MusicFile : virtual public File { // if no virtual public is defined, File will be created twice
public:
	MusicFile(const std::string& n, const std::string& p) : File(n,p) {
		std::cout << "MusicFile is born...\n";
	}
	~MusicFile() { std::cout << "MusicFile is destroyed...\n"; }
	void playAudio() { std::cout << "Play audio...\n"; }
};

class MovieFile : virtual public File {
public:
	MovieFile(const std::string& n, const std::string& p) : File(n,p) {
		std::cout << "MoviewFile is born...\n";
	}
	~MovieFile() { std::cout << "MovieFile is destroyed...\n"; }
	void playVideo() { std::cout << "Play video...\n"; }
};

class UserFile : public MusicFile, public MovieFile {
public:
	// per C++ rule the utter most class will instaniate the base class when virtual inheritance is used
	UserFile(const std::string& n, const std::string& p) : MusicFile(n,p), MovieFile(n,p), File(n,p) {
		std::cout << "UserFile is born...\n";
	}
};

class NonExplicitClass {
private:
	std::string m_name;
	int m_age;
public:
	NonExplicitClass(const std::string& n, int a) : m_name(n), m_age(a) {
		std::cout << "NonExplicitClass is born..." << m_name << "," << m_age << std::endl;
	}
	~NonExplicitClass() {
		std::cout << "NonExplicitClass is destroyed..." << m_name << "," << m_age << std::endl;
	}
	void changeSomething(const std::string& n, int a) {
		m_name = n;
		m_age = a;
	}
};


class ExplicitClass {
private:
	std::string m_name;
	int m_age;
public:
	ExplicitClass(int a, const std::string& n = "") : m_name(n), m_age(a) {
		std::cout << "ExplicitClass is born..." << m_name << "," << m_age << std::endl;
	}
	~ExplicitClass() {
		std::cout << "ExplicitClass is destroyed..." << m_name << "," << m_age << std::endl;
	}
	void changeSomething(const std::string& n, int a) {
		m_name = n;
		m_age = a;
	}
	friend void printExplicitClass(ExplicitClass a);
};

void printExplicitClass(ExplicitClass a) {
	std::cout << "Friend printing of..." << a.m_name << "," << a.m_age << std::endl;
}

class ExplicitClassII {
private:
	std::string m_name;
	int m_age;
public:
	//explicit ExplicitClassII(std::string n, int a = -99) : m_name(n), m_age(a) {
	ExplicitClassII(std::string n, int a = -99) : m_name(n), m_age(a) {
		std::cout << "ExplicitClassII is born..." << m_name << "," << m_age << std::endl;
	}
	~ExplicitClassII() {
		std::cout << "ExplicitClassII is destroyed..." << m_name << "," << m_age << std::endl;
	}
	void changeSomething(const std::string& n, int a) {
		m_name = n;
		m_age = a;
	}
	friend void printExplicitClassII(ExplicitClassII& a);
};

void printExplicitClassII(ExplicitClassII& a) {
	std::cout << "Friend printing of II..." << a.m_name << "," << a.m_age << std::endl;
}

std::mutex g_m;
bool stop = false;
int a[5];
std::string *str;

void addFunc() {
	while(!stop) {
		Sleep(20);
		Lock mylock(&g_m);
		a[0] += 1;
		a[1] += 1;
		a[2] += 1;
		a[3] += 1;
		a[4] += 1;
		//std::cout << "Add," << a[0] << "," << a[1] << "," << a[2] << "," << a[3] << "," << a[4] << "\n";
	}
}

void subFunc() {
	while(!stop) {
		Sleep(40);
		Lock mylock(&g_m);
		a[0] -= 1;
		a[1] -= 1;
		a[2] -= 1;
		a[3] -= 1;
		a[4] -= 1;
		//std::cout << "Sub," << a[0] << "," << a[1] << "," << a[2] << "," << a[3] << "," << a[4] << "\n";
	}
}

void printFunc() {
	int count = 0;
	while(!stop) {
		std::chrono::high_resolution_clock::time_point begin = std::chrono::high_resolution_clock::now();
		Sleep(200);
		std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now();
		std::chrono::duration<double> diff = end - begin;
		std::cout << count << "," << a[0] << "," << a[1] << "," << a[2] << "," << a[3] << "," << a[4] << ","
				<< diff.count() << "\n" << std::flush;
		count++;
	}
}

void some_func() {
//	std::string *s;
//	s = new std::string("test");
//	try {
//	delete s;
//	delete s;
//	} catch(...) {
//		std::cout << "Pointer delete exception\n";
//		throw "Some shit wrong w/ delete pointer";
//	}
//	try {
//		std::cout << *s << std::endl;
//	} catch(const char *e) {
//		std::cout << "Exception caught " << e << "\n";
//	}
//	return;
	unsigned concurentThreadsSupported = std::thread::hardware_concurrency();
	unsigned numCPU = 0;
	std::cout << "ConcurrentThreads: " << concurentThreadsSupported << std::endl;
#ifdef WINDOWS
	SYSTEM_INFO sysinfo;
	GetSystemInfo(&sysinfo);
	numCPU = sysinfo.dwNumberOfProcessors;
#endif
	std::cout << "numCPU: " << numCPU << std::endl;

	std::thread t1(addFunc);
	std::thread t2(subFunc);
	std::thread t3(printFunc);
	t1.join();
	t2.join();
	t3.join();
}


int main() {
	a[0] = 1;
	a[1] = 1;
	a[2] = 1;
	a[3] = 1;
	a[4] = 1;
	some_func();

	return 0;
//	C c;
//	c.CSomething();
//	c.ASomething();
//	c.BSomething();
//	c.read();
//
//	UserFile f("myblah.mp3", "c:\\somewhere\\");
//	f.MusicFile::open();

	std::cout << "NonExplicitClass test...\n";
	NonExplicitClass nec("BillyBear",12);
	NonExplicitClass nec2 = nec;
	nec2.changeSomething("HaHaHa",50);

	ExplicitClass ec(21,"BillyBearExplicit");
	ExplicitClass ec2 = ec;
	ec2.changeSomething("HaHaHaExplicit",5);

	ExplicitClass ec3(4444);
	printExplicitClass(ec);
	printExplicitClass(ec2);
	printExplicitClass(ec3);
	printExplicitClass(9999);

	std::cout << std::endl << std::endl << std::endl;

	ExplicitClassII ecII1(std::string("More Crap"),1999);
	printExplicitClassII(ecII1);
	ExplicitClassII ecII2(std::string("More more more Crap"));
	printExplicitClassII(ecII2);
	//printExplicitClassII(std::string("More more more crap"));
	std::cout << std::endl << std::endl << std::endl;
}
