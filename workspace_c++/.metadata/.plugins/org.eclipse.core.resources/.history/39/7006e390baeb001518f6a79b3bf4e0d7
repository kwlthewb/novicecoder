/*
 * Sorting.cpp
 *
 *  Created on: Mar 16, 2016
 *      Author: bill
 */

#include "Sorting.h"

void merge(int arr[], int size, int low, int middle, int high) {
	int temp[size];
	for(int i = low; i <= high; ++i) {
		temp[i] = arr[i];
	}
	int i = low;
	int j = middle + 1;
	int k = low;
	while(i <= middle && j <= high) {
		if(temp[i] <= temp[j]) {
			arr[k] = temp[i];
			++i;
		} else {
			arr[k] = temp[j];
			++j;
		}
	}
}

void mergeSort(int arr[], int size, int low, int high) {
	if(low < high) {
		int middle = (low + high) / 2;
		mergeSort(arr,size,low,middle);
		mergeSort(arr,size,middle+1,high);
		merge(arr,size,low,middle,high);
	}
}

// average O(n log n), worse case O(n^2)
void quickSort(int arr[], int left, int right) {
	int i = left;
	int j = right;
	int temp;
	int pivot = arr[(left + right) / 2];
	while(i <= j) {
		while(arr[i] < pivot)
			i++;
		while(arr[j] > pivot)
			j--;
		if(i <= j) {
			temp = arr[i];
			arr[j] = temp;
		}
	}

}

void selectionSort(int arr[], int size) {
	int temp, i = 0, j = 0;
	while(i < size - 1) {
		j = i + 1;
		while(j < size) {
			if(arr[i] > arr[j]) {
				temp = arr[i];
				arr[i] = arr[j];
				arr[j] = temp;
			}
			j++;
		}
		i++;
	}
}

void insertionSort(int arr[], int size) {
	int temp, j = 0;
	for(int i = 1; i < size; ++i) {
		j = i;
		while(j > 0 && arr[j - 1] > arr[j]) {
			temp = arr[j];
			arr[j] = arr[j-1];
			arr[j-1] = temp;
			j--;
		}
	}
}

void genAry(int arr[], int arr2[], int size) {
	int j = 0;
	for(int i = 0; i < size; i++) {
		j = rand() % 9999;
		*(arr + i) = j;
		*(arr2 + i) = j;
	}
}

int main() {
	const int size = 500000;
	int delta = size / 100;
	srand(time(0));
	int *nums1 = new int[size];
	int *nums2 = new int[size];
	genAry(nums1, nums2, size);

	int numbers[] = {5,10,1,6,2,9,3,8,7,4,6,11,5,7};
	//mergeSort(numbers,size,0,12);
	std::chrono::high_resolution_clock::time_point begin = std::chrono::high_resolution_clock::now();
	std::cout << "Start time = " << currentDateTime() << std::endl;
	insertionSort(nums1,size);
	std::chrono::high_resolution_clock::time_point end = std::chrono::high_resolution_clock::now();
	std::chrono::duration<double> diff = end - begin;
	std::cout << "End   time = " << currentDateTime() << " " << diff.count() << std::endl;
	begin = std::chrono::high_resolution_clock::now();
	std::cout << "Start time = " << currentDateTime() << std::endl;
	selectionSort(nums2,size);
	end = std::chrono::high_resolution_clock::now();
	diff = end - begin;
	std::cout << "End   time = " << currentDateTime() << " " << diff.count() << std::endl;
//	for(int i = 0; i < size; i += delta) {
//		std::cout << i << "," << nums1[i] << "," << nums2[i] << "," << (nums1[i] - nums2[i]) << std::endl;
//	}
	return 0;
}

